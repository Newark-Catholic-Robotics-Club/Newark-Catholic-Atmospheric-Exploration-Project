<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <meta charset="utf-8">
          <meta name="viewport" content="width=device-width, initial-scale=1"> <!-- mobile mode if small screen device -->
    
    <title>ITG-3200 Hookup Guide - learn.sparkfun.com</title>

    <!--[if lt IE 9]>
      <script src="http://html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <link href="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/bootstrap.css" rel="stylesheet">
    <link rel="stylesheet" href="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/theme.css" type="text/css" media="screen">    <link rel="alternate" type="application/atom+xml" title="Education Blog" href="https://learn.sparkfun.com/feeds/blog">
    <link rel="alternate" type="application/atom+xml" title="Tutorials" href="https://learn.sparkfun.com/feeds/tutorials">
    <link rel="alternate" type="application/atom+xml" title="Education Blog Comments" href="https://learn.sparkfun.com/feeds/blog_comments">
    <link rel="alternate" type="application/atom+xml" title="Tutorial Comments" href="https://learn.sparkfun.com/feeds/tutorial_comments">

    <script type="text/javascript">
          var SFECONFIG = {
      currencies: {"USD":{"code":"USD","title":"US Dollar","symbol_left":"$","symbol_right":"","decimal_point":".","thousands_point":",","decimal_places":"2","value":"1.0000"},"CAD":{"code":"CAD","title":"Canadian Dollar","symbol_left":"$","symbol_right":" CAD","decimal_point":".","thousands_point":",","decimal_places":"2","value":"1.2268"},"AUD":{"code":"AUD","title":"Australian Dollar","symbol_left":"$","symbol_right":" AUD","decimal_point":".","thousands_point":",","decimal_places":"2","value":"1.2882"},"GBP":{"code":"GBP","title":"British Pound","symbol_left":"&pound;","symbol_right":"","decimal_point":".","thousands_point":",","decimal_places":"2","value":"0.6297"},"EUR":{"code":"EUR","title":"Euro","symbol_left":"&euro;","symbol_right":"","decimal_point":".","thousands_point":",","decimal_places":"2","value":"0.8806"}},
      dnt: true,
      preferred_currency: 'USD',
        http_server: 'http://www.sparkfun.com',
        https_server: 'https://www.sparkfun.com',
        http_static: 'https://cdn.sparkfun.com',
        base_url: '/',
        url: '/',
        controller: 'tutorials',
        action: 'view',
        entity_id: '',
        auth: true,
        sparkrev: '1434830536',
        search_key: 'qLqN6uVRKXnjHd2QapGm'      };
      var require = {
        paths: {
          'jqueryui': 'https://ajax.googleapis.com/ajax/libs/jqueryui/1.10.4/jquery-ui.min'
        },
        baseUrl: '/js/',
        urlArgs: "sparkrev=" + SFECONFIG.sparkrev,
        deps: ['jqueryui'],
        callback: function() {
          $('#learn').learn();
          $('#learn').sfeutil();
        }
      };
    </script>
    <script src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/learn-built.js"></script><script src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/jquery-ui.js" data-requiremodule="jqueryui" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script>
      <script src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/tutorial.js" data-requiremodule="tutorial" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/jquery.js" data-requiremodule="jquery.imagesloaded" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/rainbow.js" data-requiremodule="rainbow" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/generic.js" data-requiremodule="generic" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/c.js" data-requiremodule="c" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script><script src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/ZeroClipboard.js" data-requiremodule="ZeroClipboard.min" data-requirecontext="_" async="" charset="utf-8" type="text/javascript"></script></head>

  <body id="learn" class="layout-default no-type tutorials-view no-touch" ontouchstart="">
    <div class="wrapper" itemscope="" itemtype="http://schema.org/WebSite">
      <meta itemprop="url" content="https://www.sparkfun.com/">
      <div class="wrapper-inner">

    
<div class="header">
  <div class="container">

<!-- Mobile Nav Button -->
<div class="mobile-menu-container left">
  <a id="nav_toggle" class="mobile-menu-button nav_toggle" href="#"><span>≡</span></a>
      <a id="search_toggle" class="mobile-menu-button" href="#"><span class="glyphicon glyphicon-search"></span></a>
  </div>

<nav class="top-links">
  &nbsp;
</nav>

<!-- Logo -->
<div class="logo-container">
  <a class="logo" href="https://www.sparkfun.com/">
    <span class="sfe-icon-flame"></span>
    <span class="sfe-icon-sparkfun" data-icon="🔥">
      <span class="visuallyhidden">sparkfun.com</span>
    </span>
  </a>
</div>

<!-- Tabs -->
<!-- also edit mobile tabs in .main-nav -->
<nav class="tabs-container">
  <ul>
    <li class="shop "><a href="https://www.sparkfun.com/">Shop</a></li>
    <li class="learn active"><a href="https://learn.sparkfun.com/">Learn</a></li>
    <li class="avc "><a href="https://avc.sparkfun.com/"><span class="sfe-icon-avc"><span class="visuallyhidden">AVC</span></span></a></li>
    <li class="forum "><a href="https://forum.sparkfun.com/">Forum</a></li>
    <li class="data "><a href="https://data.sparkfun.com/">Data</a></li>
  </ul>
</nav>

<!-- Cart & User -->
<div class="user-container mobile-menu-container right">

  <a id="account_toggle" class="mobile-menu-button" href="#"><span class="glyphicon glyphicon-user"></span></a>

  
      <div class="user">

      <div class="avatar">
        <a href="https://www.sparkfun.com/account">
          <span class="glyphicon glyphicon-user"></span>        </a>
      </div>

      <div class="account">
        <a class="salutation" href="https://www.sparkfun.com/account">Hello, Charlie</a>
        <div class="dropdown">
          <a href="https://www.sparkfun.com/account" class="dropdown-toggle" data-toggle="dropdown">
            My Account <span class="caret"></span>
          </a>
          <ul class="dropdown-menu pull-right">
            <li><a href="https://www.sparkfun.com/orders">Order History</a></li>
            <li><a href="https://www.sparkfun.com/account/products">My Products</a></li>
            <li><a href="https://www.sparkfun.com/favorites">My Favorites</a></li>
            <li><a href="https://www.sparkfun.com/wish_lists">Wish Lists</a></li>
                        <li><a href="https://www.sparkfun.com/account">Manage Account</a></li>
            <li><a href="https://www.sparkfun.com/account/profile">View Profile</a></li>
            <li><a href="https://www.sparkfun.com/account/logout?redirect=%2Flearn%2Ftutorials%2Fitg-3200-hookup-guide">Logout</a></li>
          </ul>
        </div>
      </div>
    </div>
  
</div>

<!-- Navigation / Search -->
<div class="main-nav-container">

  <nav class="main-nav">
    <ul>
      <li class="tab shop ">
        <a href="https://www.sparkfun.com/">Shop</a>      </li>
      <li class="tab learn active">
        <a href="https://learn.sparkfun.com/">Learn</a>      </li>
      <li class="tab forum ">
        <a href="https://forum.sparkfun.com/">Forum</a>
      </li>
      <li class="tab data ">
        <a href="https://data.sparkfun.com/">Data</a>
      </li>

      
<li class="start-a-project ">
  <a href="https://learn.sparkfun.com/start_a_project">Start a Project</a></li>
<li><a href="https://learn.sparkfun.com/blog">EDU Blog</a></li>
<li><a href="https://learn.sparkfun.com/resources">Resources</a></li>
<li class="active"><a href="https://learn.sparkfun.com/tutorials">Tutorials</a></li>
<li><a href="https://learn.sparkfun.com/events">Classes</a></li>
<li><a href="https://learn.sparkfun.com/calendar">Calendar</a></li>
<li><a href="https://learn.sparkfun.com/workshops">Workshops</a></li>
<li><a href="https://learn.sparkfun.com/contact">Contact</a></li>

      <li class="desktop-toggle">
        <a href="https://www.sparkfun.com/account/mobile_toggle?redirect=%2Flearn%2Ftutorials%2Fitg-3200-hookup-guide">Desktop Site</a>      </li>
    </ul>
  </nav>

      <form id="search_form" class="search" action="https://www.sparkfun.com/search/results" method="get" itemprop="potentialAction" itemscope="" itemtype="http://schema.org/SearchAction">
      <meta itemprop="target" content="https://www.sparkfun.com/search/results?term={term}">
      <div class="ui-widget">
        <span class="ui-helper-hidden-accessible" aria-live="polite" role="status"></span><input name="term" id="global-search" class="form-control ui-autocomplete-input" placeholder="search..." itemprop="query-input" autocomplete="off" type="text">
      </div>
    </form>
  
</div>

  </div>
</div>


    
    <div class="content">
      <div class="container">

        
        <div class="main-title">
  <ul class="breadcrumb">
    <li><a href="https://learn.sparkfun.com/">Home</a></li>
    <li><a href="https://learn.sparkfun.com/tutorials">Tutorials</a></li>
    <li>ITG-3200 Hookup Guide</li>
      </ul>

  <h1>
    ITG-3200 Hookup Guide  </h1>

</div>


<a id="nav_toggle_pages" class="nav_toggle" href="#"><span>≡</span> Pages</a>

<div id="tutorial" class="row">

  <div class="col-sm-8" id="sections">

    <div class="contributors">
                      Contributors:
                <a href="https://www.sparkfun.com/users/55101"><img src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/dca8e859e26320587cf9e18fe909c625.jpg"> JoelEB</a>, <a href="https://www.sparkfun.com/users/26876"><img src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/8e4405bec7e3185a46b92d6c38eab034.jpg"> zagGrad</a>          </div>

    <span class="fave_widget verbose">
  <a href="#" class="fave_btn " title="Add to favorites" data-entity="learn_tutorials" data-entity-id="3">
    <span class="fave_yes">
      <span class="glyphicon glyphicon-heart"></span>
      <span class="name">Favorited</span>
    </span>
    <span class="fave_no">
      <span class="glyphicon glyphicon-heart-empty"></span>
      <span class="name">Favorite</span>
    </span>
  </a>
  <span class="fave_count">0</span>
</span>    <div class="share-link-inline">

  <a class="share-link-toggle" href="#">
    <span class="share-title">
      <span class="sfe-icon-share"></span>
      Share    </span>
  </a>

  <div class="share-link-inner dialog">
    Use this URL to share:<br>
    <input class="form-control input-sm" value="http://sfe.io/t3" onclick="$(this).select();" type="text">

    <div class="share-social">

      <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','googleplus');" href="https://plus.google.com/share?url=http%3A%2F%2Fsfe.io%2Ft3" title="Share on Google+"><span class="sfe-icon-google-plus hidetext"><span>Share on Google+</span></span></a>

      <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','tumblr');" href="https://www.tumblr.com/share/link?url=http%3A%2F%2Fsfe.io%2Ft3&amp;name=ITG-3200+Hookup+Guide" title="Share on Tumblr"><span class="sfe-icon-tumblr hidetext"><span>Share on Tumblr</span></span></a>

      <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','reddit');" href="https://www.reddit.com/submit?url=http%3A%2F%2Fsfe.io%2Ft3" title="Submit to reddit"><span class="sfe-icon-reddit hidetext"><span>Submit to reddi</span></span></a>

    </div>

    </div>
  
  <div class="share-social">

    <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','twitter');" href="https://twitter.com/intent/tweet?text=ITG-3200+Hookup+Guide&amp;url=http%3A%2F%2Fsfe.io%2Ft3&amp;via=sparkfun" title="Share on Twitter"><span class="sfe-icon-twitter hidetext"><span>Share on Twitter</span></span></a>

    <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','facebook');" href="http://www.facebook.com/sharer.php?u=http%3A%2F%2Fsfe.io%2Ft3&amp;t=ITG-3200+Hookup+Guide" title="Share on Facebook"><span class="sfe-icon-facebook-nobox hidetext"><span>Share on Facebook</span></span></a>

          <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','pinterest');" href="https://www.pinterest.com/pin/create/button/?url=http%3A%2F%2Fsfe.io%2Ft3&amp;media=https%3A%2F%2Fcdn.sparkfun.com%2F%2Fr%2F500-1000%2Fassets%2F9%2F9%2F9%2F6%2F6%2F525ecd3d757b7f477c8b4569.png&amp;description=ITG-3200+Hookup+Guide" title="Pin It"><span class="sfe-icon-pinterest hidetext"><span>Pin It</span></span></a>
    
  </div>

  
</div>

          <div class="section tutorial-page">
        <h2 id="introduction">Introduction</h2>
        <p>This is a breakout board for <a href="https://www.sparkfun.com/products/11977">InvenSense’s ITG-3200</a>,
 a groundbreaking triple-axis, digital output gyroscope. The ITG-3200 
features three 16-bit analog-to-digital converters (ADCs) for digitizing
 the gyro outputs, a user-selectable internal low-pass filter bandwidth,
 and a Fast-Mode I<sup>2</sup>C (400kHz) interface. Additional features include an embedded temperature sensor and a 2% accurate internal oscillator.</p>

<p style="text-align:center;"> <a href="https://www.sparkfun.com/products/11977"><img src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/525ecd3d757b7f477c8b4569.png" alt="alt text"></a></p>

<p>This tutorial will help you get started using the ITG-3200 in your 
next project. We will cover the hardware, discuss the code briefly, then
 show you how to hook it up to a microcontroller.</p>

<h3>Suggested Reading</h3>

<p>This tutorial builds on some basic concepts. If you are unfamiliar 
with any of the topics below, go ahead and check them out. We’ll be 
right here waiting.</p>

<ul>
<li><a href="https://learn.sparkfun.com/tutorials/what-is-an-arduino">What is Arduino?</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/gyroscope">Gyroscope Basics</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/i2c">I<sup>2</sup>C Communication</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/terminal-basics">Serial Terminal Basics</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/how-to-solder---through-hole-soldering">How to Solder</a></li>
<li><a href="https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard">Breadboard Basics</a></li>
</ul>
      </div>
          <div class="section tutorial-page">
        <h2 id="hardware-overview">Hardware Overview</h2>
        <h3>Power</h3>

<p>The ITG-3200 can be powered at anywhere between <strong>2.1 and 3.6V</strong>. For power supply flexibility, the ITG-3200 has a separate VLOGIC reference pin (labeled <strong>VIO</strong>), in addition to its analog supply pin (<strong>VDD</strong>),
 which sets the logic levels of its serial interface. The VLOGIC voltage
 may be anywhere from 1.71V min to VDD max. For general use, VLOGIC can 
be tied to VCC. The normal operating current of the sensor is just 
6.5mA.</p>

<h3>Communication</h3>

<p>Communication with the ITG-3200 is achieved over a two-wire (I<sup>2</sup>C) interface. The sensor also features a interrupt output and an optional clock input.</p>

<h3>Clock Source Jumper</h3>

<p>In the next picture, you can see a small jumper next to the pin 
labeled ‘CLK.’ The ITG-3200 has a feature that allows you to connect an 
external clock. Unless you plan to use an external clock, you need to <strong>‘close’</strong>
 this jumper by connecting the two pads with solder. If you’re following
 this tutorial and using the provided example code, go ahead and close 
the jumper.</p>

<p style="text-align:center;"> <a href="https://cdn.sparkfun.com/assets/8/c/a/7/c/525f1999757b7f05508b4567.jpg"><img src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/525f1999757b7f05508b4567.jpg" alt="alt text"></a></p>

<p style="text-align:center;"><em><strong>Make sure you close this jumper with solder if you’re NOT using an external clock source.</strong></em></p>

<h3>I<sup>2</sup>C Address Jumper</h3>

<p>A jumper on the top of the board allows you to easily select the I<sup>2</sup>C address, by pulling the AD0 pin to either VCC or GND; the board is shipped with this jumper tied to VCC.</p>

<h3>I<sup>2</sup>C Pull-up Resistors</h3>

<p>Note that there are two unpopulated <a href="https://learn.sparkfun.com/tutorials/pull-up-resistors">pull-up resistors</a> on the I<sup>2</sup>C lines. These can be added later by the user if desired.</p>

<p style="text-align:center;"> <a href="https://cdn.sparkfun.com/assets/c/b/f/f/5/525f1999757b7fbd508b4568.png"><img src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/525f1999757b7fbd508b4568.png" alt="alt text"></a></p>

<p style="text-align:center;"><em>Here the I<sup>2</sup>C address jumper (top) and the unpopulated I<sup>2</sup>C pull-up resistors (bottom) are highlighted.</em></p>      </div>
          <div class="section tutorial-page">
        <h2 id="hooking-it-up">Hooking it Up</h2>
        <p>There are only two considerations for assembling the ITG-3200
 breakout: what to do for the headers, and whether or not you’re going 
to use an external clock source for the ITG-3200.</p>

<p>For the headers you have a couple options, you can solder in male or 
female 0.1" headers, or you can just solder wires directly to the holes 
in the breakout board. In this example, <a href="https://www.sparkfun.com/products/116">male headers</a> are soldered to the breakout board to make it easy to attach to a <a href="https://learn.sparkfun.com/tutorials/how-to-use-a-breadboard">breadboard</a>. Then, we’ll be hooking the ITG-3200 up to an <a href="https://www.sparkfun.com/products/11286">Arduino Leonardo</a> using some <a href="https://www.sparkfun.com/products/8431">male-to-male jumper wires</a>.</p>

<p>Second, since we will not be using an external clock source in this 
setup, make sure the CLKIN jumper on the bottom of the ITG-3200 is 
closed with a blob of solder.</p>

<p style="text-align:center;"> <a href="https://cdn.sparkfun.com/assets/6/5/b/a/e/52602800757b7fb8518b4568.jpg"><img src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/52602800757b7fb8518b4568.jpg" alt="alt text"></a></p>

<p style="text-align:center;"><em>Here’s everything all hooked up. Make sure you add the small jumper from VDD to VIO to ensure they are both connected to 3.3V.</em></p>

<p>The SDA and SCL pins should be present on most Arduinos. Older, 
pre-rev3 Arduinos might not have SCL and SDA pins. In that case, connect
 SDA to <strong>A4</strong> and SCL to <strong>A5</strong>.</p>

<p>The ITG3200 sensor is a 3.3V device. This means that the sensor 
should be powered by 3.3V and the communication signals should be 
between 0V and 3.3V. The Arduino Leonardo (and other similar boards) are
 5V devices. Even though we power the board with the 3.3V output from 
the Arduino, the communication signals are still going to be 5V. 
Technically this should be avoided as it can cause damage to the sensor 
in the long run. When implementing this gyro in a final project, it’s in
 your best interest to use something like a <a href="https://learn.sparkfun.com/tutorials/using-the-logic-level-converter">Logic Level Converter</a> to change the voltages of the communication signals. You could also use an <a href="https://www.sparkfun.com/products/10914">Arduino Pro (3.3V/8 MHz)</a>. However, for the purposes of testing out your gyro, using a 5V device should work fine.</p>

<p>That’s all there is to it! Now, let’s look at some code to get this gyro up and running.</p>      </div>
          <div class="section tutorial-page">
        <h2 id="firmware">Firmware</h2>
        <p>We’re finally ready to start looking at the firmware. We’ve 
written an example Arduino sketch to help you get started. You can 
download firmware from the <a href="https://github.com/sparkfun/ITG-3200_Breakout">ITG-3200 GitHub page</a>.</p>

<p>The sample sketch reads the gyroscope data for the X, Y, and Z axes 
and prints it to the serial port. This is raw gyroscope data, and it has
 not been converted to degrees per second yet. Bigger numbers mean the 
device is rotating faster. Positive numbers indicate one direction of 
rotation while negative numbers indicate the opposite rotation 
direction. Since this is a triple-axis gyroscope, we can measure the 
rotational rate of the board no matter which way the board is rotating. 
Rotation is usually measured in degrees per second. If the board spins 
around an axis exactly one time in a second, the gyroscope would measure
 360 degrees per second.</p>

<p>Now, let’s break up the code in to sections to go over what’s happening a little more in depth.</p>

<pre data-language="language:c
,c
"><div class="copy-code" data-code-id="code-0"><button class="btn btn-default btn-sm">Copy Code</button></div><code class="rainbow"><span class="comment">//The Wire library is used for I2C communication</span>
<span class="comment">#include &lt;Wire.h&gt;</span>

<span class="comment">//This is a list of registers in the ITG-3200. Registers are parameters that determine how the sensor will behave, or they can hold data that represent the</span>
<span class="comment">//sensors current status.</span>
<span class="comment">//To learn more about the registers on the ITG-3200, download and read the datasheet.</span>
<span class="keyword">char</span> WHO_AM_I <span class="keyword operator">=</span> <span class="constant numeric">0x00</span>;
<span class="keyword">char</span> SMPLRT_DIV<span class="keyword operator">=</span> <span class="constant numeric">0x15</span>;
<span class="keyword">char</span> DLPF_FS <span class="keyword operator">=</span> <span class="constant numeric">0x16</span>;
<span class="keyword">char</span> GYRO_XOUT_H <span class="keyword operator">=</span> <span class="constant numeric">0x1D</span>;
<span class="keyword">char</span> GYRO_XOUT_L <span class="keyword operator">=</span> <span class="constant numeric">0x1E</span>;
<span class="keyword">char</span> GYRO_YOUT_H <span class="keyword operator">=</span> <span class="constant numeric">0x1F</span>;
<span class="keyword">char</span> GYRO_YOUT_L <span class="keyword operator">=</span> <span class="constant numeric">0x20</span>;
<span class="keyword">char</span> GYRO_ZOUT_H <span class="keyword operator">=</span> <span class="constant numeric">0x21</span>;
<span class="keyword">char</span> GYRO_ZOUT_L <span class="keyword operator">=</span> <span class="constant numeric">0x22</span>;

<span class="comment">//This is a list of settings that can be loaded into the registers.</span>
<span class="comment">//DLPF, Full Scale Register Bits</span>
<span class="comment">//FS_SEL must be set to 3 for proper operation</span>
<span class="comment">//Set DLPF_CFG to 3 for 1kHz Fint and 42 Hz Low Pass Filter</span>
<span class="keyword">char</span> DLPF_CFG_0 <span class="keyword operator">=</span> <span class="constant numeric">1</span><span class="keyword operator">&lt;</span><span class="keyword operator">&lt;</span><span class="constant numeric">0</span>;
<span class="keyword">char</span> DLPF_CFG_1 <span class="keyword operator">=</span> <span class="constant numeric">1</span><span class="keyword operator">&lt;</span><span class="keyword operator">&lt;</span><span class="constant numeric">1</span>;
<span class="keyword">char</span> DLPF_CFG_2 <span class="keyword operator">=</span> <span class="constant numeric">1</span><span class="keyword operator">&lt;</span><span class="keyword operator">&lt;</span><span class="constant numeric">2</span>;
<span class="keyword">char</span> DLPF_FS_SEL_0 <span class="keyword operator">=</span> <span class="constant numeric">1</span><span class="keyword operator">&lt;</span><span class="keyword operator">&lt;</span><span class="constant numeric">3</span>;
<span class="keyword">char</span> DLPF_FS_SEL_1 <span class="keyword operator">=</span> <span class="constant numeric">1</span><span class="keyword operator">&lt;</span><span class="keyword operator">&lt;</span><span class="constant numeric">4</span>;

<span class="comment">//I2C devices each have an address. The address is defined in the datasheet for the device. The ITG-3200 breakout board can have different address depending on how</span>
<span class="comment">//the jumper on top of the board is configured. By default, the jumper is connected to the VDD pin. When the jumper is connected to the VDD pin the I2C address</span>
<span class="comment">//is 0x69.</span>
<span class="keyword">char</span> itgAddress <span class="keyword operator">=</span> <span class="constant numeric">0x69</span>;
</code></pre><div class="hide" id="code-0">//The Wire library is used 
for I2C communication
#include &lt;Wire.h&gt;

//This is a list of registers in the ITG-3200. Registers are parameters 
that determine how the sensor will behave, or they can hold data that 
represent the
//sensors current status.
//To learn more about the registers on the ITG-3200, download and read 
the datasheet.
char WHO_AM_I = 0x00;
char SMPLRT_DIV= 0x15;
char DLPF_FS = 0x16;
char GYRO_XOUT_H = 0x1D;
char GYRO_XOUT_L = 0x1E;
char GYRO_YOUT_H = 0x1F;
char GYRO_YOUT_L = 0x20;
char GYRO_ZOUT_H = 0x21;
char GYRO_ZOUT_L = 0x22;

//This is a list of settings that can be loaded into the registers.
//DLPF, Full Scale Register Bits
//FS_SEL must be set to 3 for proper operation
//Set DLPF_CFG to 3 for 1kHz Fint and 42 Hz Low Pass Filter
char DLPF_CFG_0 = 1&lt;&lt;0;
char DLPF_CFG_1 = 1&lt;&lt;1;
char DLPF_CFG_2 = 1&lt;&lt;2;
char DLPF_FS_SEL_0 = 1&lt;&lt;3;
char DLPF_FS_SEL_1 = 1&lt;&lt;4;

//I2C devices each have an address. The address is defined in the 
datasheet for the device. The ITG-3200 breakout board can have different
 address depending on how
//the jumper on top of the board is configured. By default, the jumper 
is connected to the VDD pin. When the jumper is connected to the VDD pin
 the I2C address
//is 0x69.
char itgAddress = 0x69;
</div>

<p>This is the configuration section of the sketch. It looks more complicated than it is! First we include the <strong>“Wire.h”</strong> library, which comes standard with the Arduino IDE. This library is used for I<sup>2</sup>C communication, which is the communication protocol used by the ITG-3200.</p>

<p>Next, there is list of variables which are assigned to different 
registers on the ITG-3200. Registers are used mostly to do two things: 
configure parameters for a sensor, or hold data that the sensor has 
collected. When we want to interact with a sensor’s register, we must 
tell the sensor which register address we want to work with. After the 
list of registers is a short list of register parameters. This is only a
 list for the parameters used by this sketch. There are many more 
parameters listed in the ITG-3200 datasheet that aren’t used in this 
example.</p>

<p>Finally, after the list of parameters, is the <code>itgAddress</code> variable. This is the I<sup>2</sup>C address of the ITG-3200. The I<sup>2</sup>C
 address for the sensor is also listed in the datasheet. Remember, this 
address is directly impacted by the configuration of the solder jumper 
on the top of the PCB.</p>

<pre data-language="language:c
,c
"><div class="copy-code" data-code-id="code-1"><button class="btn btn-default btn-sm">Copy Code</button></div><code class="rainbow"><span class="comment">//In the setup section of the sketch the serial port will be configured, the i2c communication will be initialized, and the itg-3200 will be configured.</span>
<span class="keyword">void</span> <span class="function call">setup</span>()
{
  <span class="comment">//Create a serial connection using a 9600bps baud rate.</span>
  Serial.<span class="function call">begin</span>(<span class="constant numeric">9600</span>);

  <span class="comment">//Initialize the I2C communication. This will set the Arduino up as the 'Master' device.</span>
  Wire.<span class="function call">begin</span>();

  <span class="comment">//Read the WHO_AM_I register and print the result</span>
  <span class="keyword">char</span> id<span class="keyword operator">=</span><span class="constant numeric">0</span>; 
  id <span class="keyword operator">=</span> <span class="function call">itgRead</span>(itgAddress, <span class="constant numeric">0x00</span>);  
  Serial.<span class="keyword">print</span>(<span class="string">"ID: "</span>);
  Serial.<span class="function call">println</span>(id, HEX);

  <span class="comment">//Configure the gyroscope</span>
  <span class="comment">//Set the gyroscope scale for the outputs to +/-2000 degrees per second</span>
  <span class="function call">itgWrite</span>(itgAddress, DLPF_FS, (DLPF_FS_SEL_0<span class="keyword operator">|</span>DLPF_FS_SEL_1<span class="keyword operator">|</span>DLPF_CFG_0));
  <span class="comment">//Set the sample rate to 100 hz</span>
  <span class="function call">itgWrite</span>(itgAddress, SMPLRT_DIV, <span class="constant numeric">9</span>);
}
</code></pre><div class="hide" id="code-1">//In the setup section of the
 sketch the serial port will be configured, the i2c communication will 
be initialized, and the itg-3200 will be configured.
void setup()
{
  //Create a serial connection using a 9600bps baud rate.
  Serial.begin(9600);

  //Initialize the I2C communication. This will set the Arduino up as 
the 'Master' device.
  Wire.begin();

  //Read the WHO_AM_I register and print the result
  char id=0; 
  id = itgRead(itgAddress, 0x00);  
  Serial.print("ID: ");
  Serial.println(id, HEX);

  //Configure the gyroscope
  //Set the gyroscope scale for the outputs to +/-2000 degrees per 
second
  itgWrite(itgAddress, DLPF_FS, 
(DLPF_FS_SEL_0|DLPF_FS_SEL_1|DLPF_CFG_0));
  //Set the sample rate to 100 hz
  itgWrite(itgAddress, SMPLRT_DIV, 9);
}
</div>

<p>The Setup section of the code is pretty short. First, we create a 
Serial connection so that we can print data to a terminal window. Then 
we initialize the I<sup>2</sup>C communication protocol. Now the Arduino
 is ready to start interacting with the ITG-3200. Most sensors have some
 kind of identification register. A good way to verify that the 
communication is working properly is to read the identification register
 and ensure the result is valid. After reading the identification 
register a couple of values are written to some registers on the 
ITG-3200 to configure the gyroscope to read data at 100hz and measure 
rotation rates up to 2000 degrees per second. The itgRead and itgWrite 
functions will be explained a little later. Once the device has been 
configured the actual gyroscope data can be read.</p>

<pre data-language="language:c
,c
"><div class="copy-code" data-code-id="code-2"><button class="btn btn-default btn-sm">Copy Code</button></div><code class="rainbow"><span class="comment">//The loop section of the sketch will read the X,Y and Z output rates from the gyroscope and output them in the Serial Terminal</span>
<span class="keyword">void</span> <span class="function call">loop</span>()
{
  <span class="comment">//Create variables to hold the output rates.</span>
  <span class="keyword">int</span> xRate, yRate, zRate;
  <span class="comment">//Read the x,y and z output rates from the gyroscope.</span>
  xRate <span class="keyword operator">=</span> <span class="function call">readX</span>();
  yRate <span class="keyword operator">=</span> <span class="function call">readY</span>();
  zRate <span class="keyword operator">=</span> <span class="function call">readZ</span>();
  <span class="comment">//Print the output rates to the terminal, seperated by a TAB character.</span>
  Serial.<span class="keyword">print</span>(xRate);
  Serial.<span class="keyword">print</span>(<span class="string">'\t'</span>);
  Serial.<span class="keyword">print</span>(yRate);
  Serial.<span class="keyword">print</span>(<span class="string">'\t'</span>);
  Serial.<span class="function call">println</span>(zRate);  

  <span class="comment">//Wait 10ms before reading the values again. (Remember, the output rate was set to 100hz and 1reading per 10ms = 100hz.)</span>
  <span class="function call">delay</span>(<span class="constant numeric">10</span>);
}
</code></pre><div class="hide" id="code-2">//The loop section of the sketch will read the X,Y and Z output rates from the gyroscope and output them in the Serial Terminal
void loop()
{
  //Create variables to hold the output rates.
  int xRate, yRate, zRate;
  //Read the x,y and z output rates from the gyroscope.
  xRate = readX();
  yRate = readY();
  zRate = readZ();
  //Print the output rates to the terminal, seperated by a TAB character.
  Serial.print(xRate);
  Serial.print('\t');
  Serial.print(yRate);
  Serial.print('\t');
  Serial.println(zRate);  

  //Wait 10ms before reading the values again. (Remember, the output rate was set to 100hz and 1reading per 10ms = 100hz.)
  delay(10);
}
</div>

<p>The Loop section of the code is usually the ‘meat’ of the sketch, in 
this case the loop is very straightforward. The sketch reads the X, Y, 
and Z gyroscope values using the readX(), readY() and readZ() functions.
 After storing these values, they are printed to the serial terminal. We
 delay 10 ms at the end of the loop so that we don’t try reading 
information from the sensor faster than it can be provided. For the 
Setup and Loop sections of the code to look so simple we had to use a 
couple of functions, let’s see how the functions work.</p>

<pre data-language="language:c
,c
"><div class="copy-code" data-code-id="code-3"><button class="btn btn-default btn-sm">Copy Code</button></div><code class="rainbow"><span class="comment">//This function will write a value to a register on the itg-3200.</span>
<span class="comment">//Parameters:</span>
<span class="comment">// char address: The I2C address of the sensor. For the ITG-3200 breakout the address is 0x69.</span>
<span class="comment">// char registerAddress: The address of the register on the sensor that should be written to.</span>
<span class="comment">// char data: The value to be written to the specified register.</span>
<span class="keyword">void</span> <span class="function call">itgWrite</span>(<span class="keyword">char</span> address, <span class="keyword">char</span> registerAddress, <span class="keyword">char</span> data)
{
  <span class="comment">//Initiate a communication sequence with the desired i2c device</span>
  Wire.<span class="function call">beginTransmission</span>(address);
  <span class="comment">//Tell the I2C address which register we are writing to</span>
  Wire.<span class="function call">write</span>(registerAddress);
  <span class="comment">//Send the value to write to the specified register</span>
  Wire.<span class="function call">write</span>(data);
  <span class="comment">//End the communication sequence</span>
  Wire.<span class="function call">endTransmission</span>();
}

<span class="comment">//This function will read the data from a specified register on the ITG-3200 and return the value.</span>
<span class="comment">//Parameters:</span>
<span class="comment">// char address: The I2C address of the sensor. For the ITG-3200 breakout the address is 0x69.</span>
<span class="comment">// char registerAddress: The address of the register on the sensor that should be read</span>
<span class="comment">//Return:</span>
<span class="comment">// unsigned char: The value currently residing in the specified register</span>
<span class="keyword">unsigned</span> <span class="keyword">char</span> <span class="function call">itgRead</span>(<span class="keyword">char</span> address, <span class="keyword">char</span> registerAddress)
{
  <span class="comment">//This variable will hold the contents read from the i2c device.</span>
  <span class="keyword">unsigned</span> <span class="keyword">char</span> data<span class="keyword operator">=</span><span class="constant numeric">0</span>;

  <span class="comment">//Send the register address to be read.</span>
  Wire.<span class="function call">beginTransmission</span>(address);
  <span class="comment">//Send the Register Address</span>
  Wire.<span class="function call">write</span>(registerAddress);
  <span class="comment">//End the communication sequence.</span>
  Wire.<span class="function call">endTransmission</span>();

  <span class="comment">//Ask the I2C device for data</span>
  Wire.<span class="function call">beginTransmission</span>(address);
  Wire.<span class="function call">requestFrom</span>(address, <span class="constant numeric">1</span>);

  <span class="comment">//Wait for a response from the I2C device</span>
  <span class="keyword">if</span>(Wire.<span class="function call">available</span>()){
    <span class="comment">//Save the data sent from the I2C device</span>
    data <span class="keyword operator">=</span> Wire.<span class="function call">read</span>();
  }

  <span class="comment">//End the communication sequence.</span>
  Wire.<span class="function call">endTransmission</span>();

  <span class="comment">//Return the data read during the operation</span>
  <span class="keyword">return</span> data;
}

<span class="comment">//This function is used to read the X-Axis rate of the gyroscope. The function returns the ADC value from the Gyroscope</span>
<span class="comment">//NOTE: This value is NOT in degrees per second.</span>
<span class="comment">//Usage: int xRate = readX();</span>
<span class="keyword">int</span> <span class="function call">readX</span>(<span class="keyword">void</span>)
{
  <span class="keyword">int</span> data<span class="keyword operator">=</span><span class="constant numeric">0</span>;
  data <span class="keyword operator">=</span> <span class="function call">itgRead</span>(itgAddress, GYRO_XOUT_H)<span class="keyword operator">&lt;</span><span class="keyword operator">&lt;</span><span class="constant numeric">8</span>;
  data <span class="keyword operator">|</span><span class="keyword operator">=</span> <span class="function call">itgRead</span>(itgAddress, GYRO_XOUT_L);

  <span class="keyword">return</span> data;
}

<span class="comment">//This function is used to read the Y-Axis rate of the gyroscope. The function returns the ADC value from the Gyroscope</span>
<span class="comment">//NOTE: This value is NOT in degrees per second.</span>
<span class="comment">//Usage: int yRate = readY();</span>
<span class="keyword">int</span> <span class="function call">readY</span>(<span class="keyword">void</span>)
{
  <span class="keyword">int</span> data<span class="keyword operator">=</span><span class="constant numeric">0</span>;
  data <span class="keyword operator">=</span> <span class="function call">itgRead</span>(itgAddress, GYRO_YOUT_H)<span class="keyword operator">&lt;</span><span class="keyword operator">&lt;</span><span class="constant numeric">8</span>;
  data <span class="keyword operator">|</span><span class="keyword operator">=</span> <span class="function call">itgRead</span>(itgAddress, GYRO_YOUT_L);

  <span class="keyword">return</span> data;
}

<span class="comment">//This function is used to read the Z-Axis rate of the gyroscope. The function returns the ADC value from the Gyroscope</span>
<span class="comment">//NOTE: This value is NOT in degrees per second.</span>
<span class="comment">//Usage: int zRate = readZ();</span>
<span class="keyword">int</span> <span class="function call">readZ</span>(<span class="keyword">void</span>)
{
  <span class="keyword">int</span> data<span class="keyword operator">=</span><span class="constant numeric">0</span>;
  data <span class="keyword operator">=</span> <span class="function call">itgRead</span>(itgAddress, GYRO_ZOUT_H)<span class="keyword operator">&lt;</span><span class="keyword operator">&lt;</span><span class="constant numeric">8</span>;
  data <span class="keyword operator">|</span><span class="keyword operator">=</span> <span class="function call">itgRead</span>(itgAddress, GYRO_ZOUT_L);

  <span class="keyword">return</span> data;
}
</code></pre><div class="hide" id="code-3">//This function will write a value to a register on the itg-3200.
//Parameters:
// char address: The I2C address of the sensor. For the ITG-3200 breakout the address is 0x69.
// char registerAddress: The address of the register on the sensor that should be written to.
// char data: The value to be written to the specified register.
void itgWrite(char address, char registerAddress, char data)
{
  //Initiate a communication sequence with the desired i2c device
  Wire.beginTransmission(address);
  //Tell the I2C address which register we are writing to
  Wire.write(registerAddress);
  //Send the value to write to the specified register
  Wire.write(data);
  //End the communication sequence
  Wire.endTransmission();
}

//This function will read the data from a specified register on the ITG-3200 and return the value.
//Parameters:
// char address: The I2C address of the sensor. For the ITG-3200 breakout the address is 0x69.
// char registerAddress: The address of the register on the sensor that should be read
//Return:
// unsigned char: The value currently residing in the specified register
unsigned char itgRead(char address, char registerAddress)
{
  //This variable will hold the contents read from the i2c device.
  unsigned char data=0;

  //Send the register address to be read.
  Wire.beginTransmission(address);
  //Send the Register Address
  Wire.write(registerAddress);
  //End the communication sequence.
  Wire.endTransmission();

  //Ask the I2C device for data
  Wire.beginTransmission(address);
  Wire.requestFrom(address, 1);

  //Wait for a response from the I2C device
  if(Wire.available()){
    //Save the data sent from the I2C device
    data = Wire.read();
  }

  //End the communication sequence.
  Wire.endTransmission();

  //Return the data read during the operation
  return data;
}

//This function is used to read the X-Axis rate of the gyroscope. The function returns the ADC value from the Gyroscope
//NOTE: This value is NOT in degrees per second.
//Usage: int xRate = readX();
int readX(void)
{
  int data=0;
  data = itgRead(itgAddress, GYRO_XOUT_H)&lt;&lt;8;
  data |= itgRead(itgAddress, GYRO_XOUT_L);

  return data;
}

//This function is used to read the Y-Axis rate of the gyroscope. The function returns the ADC value from the Gyroscope
//NOTE: This value is NOT in degrees per second.
//Usage: int yRate = readY();
int readY(void)
{
  int data=0;
  data = itgRead(itgAddress, GYRO_YOUT_H)&lt;&lt;8;
  data |= itgRead(itgAddress, GYRO_YOUT_L);

  return data;
}

//This function is used to read the Z-Axis rate of the gyroscope. The function returns the ADC value from the Gyroscope
//NOTE: This value is NOT in degrees per second.
//Usage: int zRate = readZ();
int readZ(void)
{
  int data=0;
  data = itgRead(itgAddress, GYRO_ZOUT_H)&lt;&lt;8;
  data |= itgRead(itgAddress, GYRO_ZOUT_L);

  return data;
}
</div>

<p>There are five functions in this sketch, but three of them are very similar. The first function, <code>itgWrite()</code>,
 is used to write a value to a register on the ITG-3200. To use this 
function three parameters must be provided: the address, the 
registerAddress, and the data. The address is the I<sup>2</sup>C address of the sensor. As it turns out, more than one sensor can be connected to theI<sup>2</sup>C
 pins at the same time. In order for the sensors to know who is supposed
 to be getting the data, they each have a unique address. That’s what 
we’re providing with the ‘address’ parameter. The second parameter is 
the registerAddress. Like we discussed earlier, most sensors have a set 
of registers, and each register has it’s own address. The last parameter
 is the data to be written to the address. We can configure a parameter 
on a sensor by writing data to a register address.</p>

<p>The next function is the <code>itgRead()</code> function. This 
function allows us to read the data stored in the register of a sensor. 
The itgRead function requires two parameters, and it returns a character
 value. The parameters are similar to those in the <code>itgWrite()</code> function; the address is the I<sup>2</sup>C
 address of the sensor we want to read from, and the registerAddress is 
the address of the register we want to read. The function will send the 
contents of the register back.</p>

<h3>Running the Sketch</h3>

<p>Once you’ve connected the ITG-3200 breakout board to the Arduino you 
can upload the ITG3200 Basic Arduino sketch. To see the data from the 
gyroscope, just <a href="https://learn.sparkfun.com/tutorials/terminal-basics">open the serial terminal</a>
 with a baud rate setting of 9600. You’ll see values start streaming 
through the terminal window almost immediately. On each line of the 
terminal, there are three values: x, y, and z rotation values. Remember,
 we didn’t convert this data to degrees per second so the values that 
are being streamed are the <a href="https://learn.sparkfun.com/tutorials/analog-to-digital-conversion">ADC values</a>
 from the ITG-3200. You may also notice that even if the gyroscope is 
sitting still (not rotating in any direction) the values aren’t 
reporting 0. This is because there is an inherent bias in the gyroscope.
 To get accurate measurements you’ll need to calibrate the readings. You
 can do this in the sketch by reading the values output from the sensor 
while it is sitting still and storing them into some variables. Then 
later, when the sensor values are being read, just offset the readings 
by the calibration values.</p>      </div>
          <div class="section tutorial-page">
        <h2 id="resources-and-going-further">Resources and Going Further</h2>
        <p>You should now have a good understanding of how the ITG-3200 
works. Now get out there and make some cool projects! If you need more 
info on the ITG-3200, make sure you check out the <a href="https://www.sparkfun.com/datasheets/Sensors/Gyro/PS-ITG-3200-00-01.4.pdf">datasheet</a>.</p>

<p>Want to learn more about gyroscopes? Check out our <a href="https://www.sparkfun.com/pages/accel_gyro_guide">buying guide</a> to learn about all the variteies SparkFun carries.</p>      </div>
    
        <div class="share-link-inline">

  <a class="share-link-toggle" href="#">
    <span class="share-title">
      <span class="sfe-icon-share"></span>
      Share    </span>
  </a>

  <div class="share-link-inner dialog">
    Use this URL to share:<br>
    <input class="form-control input-sm" value="http://sfe.io/t3" onclick="$(this).select();" type="text">

    <div class="share-social">

      <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','googleplus');" href="https://plus.google.com/share?url=http%3A%2F%2Fsfe.io%2Ft3" title="Share on Google+"><span class="sfe-icon-google-plus hidetext"><span>Share on Google+</span></span></a>

      <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','tumblr');" href="https://www.tumblr.com/share/link?url=http%3A%2F%2Fsfe.io%2Ft3&amp;name=ITG-3200+Hookup+Guide" title="Share on Tumblr"><span class="sfe-icon-tumblr hidetext"><span>Share on Tumblr</span></span></a>

      <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','reddit');" href="https://www.reddit.com/submit?url=http%3A%2F%2Fsfe.io%2Ft3" title="Submit to reddit"><span class="sfe-icon-reddit hidetext"><span>Submit to reddi</span></span></a>

    </div>

    </div>
  
  <div class="share-social">

    <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','twitter');" href="https://twitter.com/intent/tweet?text=ITG-3200+Hookup+Guide&amp;url=http%3A%2F%2Fsfe.io%2Ft3&amp;via=sparkfun" title="Share on Twitter"><span class="sfe-icon-twitter hidetext"><span>Share on Twitter</span></span></a>

    <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','facebook');" href="http://www.facebook.com/sharer.php?u=http%3A%2F%2Fsfe.io%2Ft3&amp;t=ITG-3200+Hookup+Guide" title="Share on Facebook"><span class="sfe-icon-facebook-nobox hidetext"><span>Share on Facebook</span></span></a>

          <a rel="nofollow" onclick="return $(this).sfeutil('track_link',this,'Share','clicked','pinterest');" href="https://www.pinterest.com/pin/create/button/?url=http%3A%2F%2Fsfe.io%2Ft3&amp;media=https%3A%2F%2Fcdn.sparkfun.com%2F%2Fr%2F500-1000%2Fassets%2F9%2F9%2F9%2F6%2F6%2F525ecd3d757b7f477c8b4569.png&amp;description=ITG-3200+Hookup+Guide" title="Pin It"><span class="sfe-icon-pinterest hidetext"><span>Pin It</span></span></a>
    
  </div>

  
</div>

  </div>

  <div class="col-sm-4" id="nav-pages">
    <div class="affix" id="sidebar_affix">

      <div id="tutorial-pages" class="list-group">
        <a class="list-group-item"><b>Sections</b></a>
                          <a data-pagename="introduction" class="list-group-item" href="#introduction">
            Introduction          </a>
                  <a data-pagename="hardware-overview" class="list-group-item" href="#hardware-overview">
            Hardware Overview          </a>
                  <a data-pagename="hooking-it-up" class="list-group-item active" href="#hooking-it-up">
            Hooking it Up          </a>
                  <a data-pagename="firmware" class="list-group-item" href="#firmware">
            Firmware          </a>
                  <a data-pagename="resources-and-going-further" class="list-group-item" href="#resources-and-going-further">
            Resources and Going Further          </a>
              </div>

      <div class="list-group">
        <a class="list-group-item" href="https://learn.sparkfun.com/tutorials/itg-3200-hookup-guide/discuss">
          Comments
          <span class="badge">2</span>
        </a>
        <a class="list-group-item" href="https://learn.sparkfun.com/tutorials/itg-3200-hookup-guide/introduction">
          View Paginated
        </a>
        <a class="list-group-item" href="#" onclick="window.print(); return false;">
          Print
        </a>
      </div>

      <ul class="list-group">
        <li class="list-group-item"><b>Tags</b></li>
        <li class="list-group-item"><ul class="tags-list">
  <li>
    <a class="tag" href="https://learn.sparkfun.com/tutorials/tags/hookup">Hookup</a>  </li>
  <li>
    <a class="tag" href="https://learn.sparkfun.com/tutorials/tags/sensors">Sensors</a>  </li>
</ul>
</li>
      </ul>

      <ul class="list-group">
        <li class="list-group-item"><b>License</b></li>
        <li class="list-group-item">
          <span class="sfe-icon-cc">
            <span class="visuallyhidden">Creative Commons</span>
          </span>
          <small>tutorials are <a href="http://creativecommons.org/licenses/by-nc-sa/3.0/" target="new">CC BY-NC-SA 3.0</a></small>
        </li>
      </ul>

    </div>
  </div>

</div>

<script type="text/javascript">
  require(['tutorial', 'jquery.imagesloaded'], function() {
    $('#tutorial').tutorial();
  });
</script>

      </div> <!-- /container -->
    </div> <!-- /content -->

    
<footer>

<div class="social">
  <div class="container">
    <div class="row">
      <div class="col-xs-12 col-sm-12 col-md-12">
        <div class="sharing-ingenuity">
          <span class="sfe-icon-flame"></span>
          <span class="text"><span class="text-top">Sharing<br></span>Ingenuity</span>
        </div>
        <ul class="spew">
          <li><a href="http://www.github.com/sparkfun" target="_blank" class="sfe-icon-github"><span class="visuallyhidden">GitHub</span></a></li>
          <li><a href="http://www.youtube.com/sparkfun" target="_blank" class="sfe-icon-youtube"><span class="visuallyhidden">YouTube</span></a></li>
          <li><a href="http://www.vimeo.com/sparkfun" target="_blank" class="sfe-icon-vimeo"><span class="visuallyhidden">Vimeo</span></a></li>
          <li><a href="http://www.facebook.com/SparkFun" target="_blank" class="sfe-icon-facebook"><span class="visuallyhidden">Facebook</span></a></li>
          <li><a href="https://plus.google.com/106084846822083498483/" target="_blank" class="sfe-icon-google-plus"><span class="visuallyhidden">Google Plus</span></a></li>
          <li><a href="http://www.flickr.com/photos/sparkfun/" target="_blank" class="sfe-icon-flickr"><span class="visuallyhidden">Flickr</span></a></li>
          <li><a href="https://twitter.com/#%21/sparkfun" target="_blank" class="sfe-icon-twitter"><span class="visuallyhidden">Twitter</span></a></li>
          <li><a href="https://www.sparkfun.com/feeds" class="sfe-icon-feed"><span class="visuallyhidden">RSS</span></a></li>
        </ul>
        <div class="newsletter">
          <form action="https://learn.sparkfun.com/newsletter/subscribe" method="post" class="form-inline" id="js-newsletter_subscribe">
            <div class="form-group">
              <input class="btn btn-default" value="Subscribe to Education Newsletter" type="submit">
            </div>
          </form>
        </div>
      </div>
    </div><!-- end .row -->
  </div><!-- end .container -->
</div><!-- end .social -->

<div class="container">

    <div class="row">

    <div class="subfooter subfooter-about">
      <p>
        <b>SparkFun</b> is an online retail store that sells the bits and pieces to
        make your electronics projects possible. Whether it's a robot that can
        cook your breakfast or a GPS cat tracking device, our products and
        resources are designed to make the world of electronics more accessible.
      </p>
      <p>
        In addition to products, SparkFun also offers
        classes and online tutorials to help educate
        individuals in the wonderful world of embedded electronics.
      </p>

      <div class="row">

        <div class="col-sm-6">
          <ul>
            <li><b>About Us</b>
            </li><li><a href="https://www.sparkfun.com/static/about">About SparkFun</a></li>
            <li><a href="https://learn.sparkfun.com/about">SparkFun Education</a></li>
            <li><a title="RSS Feeds" href="https://www.sparkfun.com/feeds">Feeds <span class="sfe-icon-feed"></span></a></li>
            <li><a href="https://www.sparkfun.com/jobs">Jobs</a></li>
            <li><a href="https://www.sparkfun.com/static/contact">Contact</a></li>
          </ul>
        </div>

        <div class="col-sm-6">
          <ul>
            <li><b>Help</b></li>
            <li><a href="https://www.sparkfun.com/support">Customer Service</a></li>
            <li><a href="https://www.sparkfun.com/support#ShippingPolicy">Shipping</a></li>
            <li><a href="https://www.sparkfun.com/returns">Return Policy</a></li>
            <li><a href="https://www.sparkfun.com/static/faq">FAQ</a></li>
                      </ul>
        </div>

      </div>

      <div class="row">

        <div class="col-sm-6">
          <ul>
            <li><b>Programs</b></li>
            <li><a href="https://learn.sparkfun.com/educator_discount">Educator Discount</a></li>
            <li><a href="https://www.sparkfun.com/sponsor">Partner with SparkFun</a></li>
            <li><a href="https://www.sparkfun.com/project_calls">Tell Us About Your Project</a></li>
            <li><a href="https://learn.sparkfun.com/tutorials/how-to-sell-your-widget-on-sparkfun">Sell Your Widget on SparkFun</a></li>
            <li><a href="https://www.sparkfun.com/distributors/apply">Become a SparkFun Distributor</a></li>
          </ul>
        </div>

        <div class="col-sm-6">
          <ul>
            <li><b>Community</b></li>
            <li><a href="https://forum.sparkfun.com/">Forum</a></li>
            <li><a href="https://www.sparkfun.com/news/263">SparkFun IRC Channel</a></li>
            <li><a href="https://www.sparkfun.com/quiz">Take the SparkFun Quiz</a></li>
            <li><a href="https://www.kickstarter.com/pages/sparkfun">SparkFun Kickstarter Projects</a></li>
            <li><a href="https://www.sparkfun.com/distributors">Distributors</a></li>
          </ul>
        </div>

      </div><!-- end .row -->

    </div>

    <div id="feedback" class="subfooter subfooter-woym">
      <form id="woym_form" class="feedback" action="https://learn.sparkfun.com/feedback/mind.json" onsubmit="$(this).sfeutil('mind_feedback'); return false;" method="POST">
        <div class="error" id="error_feedback" style="display: none"></div>
        <input name="sparkaptcha" id="sparkaptcha" value="0" type="hidden">

        <div class="form-group">
          <label for="feedback_textarea" class="control-label">What's on your mind?</label>
          <div class="controls">
            <textarea id="feedback_textarea" class="form-control" name="feedback_text" required=""></textarea>
            <div class="error" id="error_feedback_text" style="display: none"></div>
          </div>
        </div>

        <div class="form-group">
          <label for="feedback_dest" class="control-label">For which department?</label>
          <select name="dest" class="form-control" id="feedback_dest">
            <option selected="selected" value="general">General</option>
            <option value="cust">Customer Service</option>
            <option value="tech">Tech Support</option>
                          <option value="edu">Education Department</option>
                      </select>
        </div>

        <div class="form-group">
          <label for="feedback_email" class="control-label">
            Please include your email address if you'd like us to respond to a specific question.
          </label>

          <div class="input-group">
            <span class="input-group-addon"><span class="glyphicon glyphicon-envelope"></span></span>
            <input class="form-control" id="feedback_email" name="email" placeholder="email address" type="text">
          </div>
          <div class="error" id="error_feedback_email" style="display: none"></div>

        </div>

        <button type="submit">Submit</button>
      </form>
    </div>

  </div><!-- end .row -->
  
  <ul class="copyleft">
    <li>SparkFun Electronics <a href="https://www.sparkfun.com/news/300">®</a></li>
    <li><a href="http://maps.google.com/maps?f=q&amp;source=s_q&amp;hl=en&amp;geocode=&amp;q=6333+Dry+Creek+Parkway,+Niwot,+CO+80503">Niwot, Colorado</a></li>
    <li><a href="https://www.sparkfun.com/support">Customer Service</a></li>
    <li><a href="https://www.sparkfun.com/sitemap">Site Map</a></li>
    <li><a href="https://www.sparkfun.com/terms">Terms of Service</a></li>
    <li><a href="https://www.sparkfun.com/privacy">Privacy Policy</a></li>
    <li class="desktop-toggle">
              <a href="https://www.sparkfun.com/account/mobile_toggle?redirect=%2Flearn%2Ftutorials%2Fitg-3200-hookup-guide">Desktop Site</a>          </li>
  </ul>

</div><!-- end .container -->

</footer>

    <div class="nav-account">
  <ul class="nav nav-tabs">
    <li class="visible-xs">
      <a class="nav-toggle-account back" href="#">Your Account</a>
    </li>
          <li class="">
        <a href="https://www.sparkfun.com/account">Settings</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/account/profile">Profile</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/orders">Orders</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/addresses">Addresses</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/account/products">My Products</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/favorites">My Favorites</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/account/comments">Comments</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/emails">Email Notifications</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/account/gift_certificates">Gifts &amp; Credit</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/account/currencies">Currency</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/rma">RMA</a>
      </li>
          <li class="">
        <a href="https://www.sparkfun.com/account/logout?redirect=%2Flearn%2Ftutorials%2Fitg-3200-hookup-guide">Log Out</a>
      </li>
      </ul>
</div>

      </div><!-- end .wrapper-inner -->
    </div><!-- end .wrapper -->

    <!-- Login Modal -->
<div class="modal fade" id="login_modal" tabindex="-1" role="dialog" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">×</span><span class="sr-only">Close</span></button>
        <h4 class="modal-title">Log In</h4>
        <p class="modal-header-msg"></p>
      </div>
      <div class="modal-body">
        <form role="form" action="https://www.sparkfun.com/account/login" method="post">
          <input name="redirect" value="/learn/tutorials/itg-3200-hookup-guide" type="hidden">
          <div class="form-group">
            <label for="login-username">Email</label>
            <input tabindex="1" name="user" id="login-username" class="form-control" type="email">
          </div>
          <div class="form-group">
            <label for="login-password">Password</label>
            <input tabindex="2" name="passwd" id="login-password" class="form-control" type="password">
          </div>
          <div class="form-group">
            <input value="Log In" tabindex="3" class="btn btn-action" type="submit">
          </div>
        </form>
        <p>
          <a href="https://www.sparkfun.com/account/forgot_password">Forgot your password?</a>          <br>
          No account? <a id="btn_register_account" href="https://www.sparkfun.com/account/make">Register one!</a>        </p>
      </div>
    </div>
  </div>
</div>
  


<ul style="display: none;" tabindex="0" id="ui-id-1" class="ui-autocomplete ui-front ui-menu ui-widget ui-widget-content ui-corner-all"></ul><div style="position: absolute; left: 0px; top: -9999px; width: 15px; height: 15px; z-index: 999999999;" class="global-zeroclipboard-container" id="global-zeroclipboard-html-bridge">      <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" id="global-zeroclipboard-flash-bridge" height="100%" width="100%">         <param name="movie" value="/js/ZeroClipboard.swf?noCache=1434935662762">         <param name="allowScriptAccess" value="sameDomain">         <param name="scale" value="exactfit">         <param name="loop" value="false">         <param name="menu" value="false">         <param name="quality" value="best">         <param name="bgcolor" value="#ffffff">         <param name="wmode" value="transparent">         <param name="flashvars" value="trustedOrigins=learn.sparkfun.com%2C%2F%2Flearn.sparkfun.com%2Chttps%3A%2F%2Flearn.sparkfun.com&amp;jsModuleId=ZeroClipboard.min">         <embed src="ITG-3200%20Hookup%20Guide%20-%20learn.sparkfun.com_files/ZeroClipboard.swf" loop="false" menu="false" quality="best" bgcolor="#ffffff" name="global-zeroclipboard-flash-bridge" allowscriptaccess="sameDomain" allowfullscreen="false" type="application/x-shockwave-flash" wmode="transparent" pluginspage="http://www.macromedia.com/go/getflashplayer" flashvars="trustedOrigins=learn.sparkfun.com%2C%2F%2Flearn.sparkfun.com%2Chttps%3A%2F%2Flearn.sparkfun.com&amp;jsModuleId=ZeroClipboard.min" scale="exactfit" height="100%" width="100%">                </object></div></body></html>